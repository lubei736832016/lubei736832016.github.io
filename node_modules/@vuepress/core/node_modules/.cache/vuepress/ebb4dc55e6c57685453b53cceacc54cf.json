{"remainingRequest":"D:\\VuePress-boke-them\\lubei736832016.github.io\\node_modules\\babel-loader\\lib\\index.js??ref--3-1!D:\\VuePress-boke-them\\lubei736832016.github.io\\node_modules\\vuepress-plugin-ribbon-animation\\bin\\ribbon.js","dependencies":[{"path":"D:\\VuePress-boke-them\\lubei736832016.github.io\\node_modules\\vuepress-plugin-ribbon-animation\\bin\\ribbon.js","mtime":1697249109519},{"path":"D:\\VuePress-boke-them\\lubei736832016.github.io\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1697190604579},{"path":"D:\\VuePress-boke-them\\lubei736832016.github.io\\node_modules\\babel-loader\\lib\\index.js","mtime":1697190604567}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}